name: production-workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: crm-web3-service-production # set this to your Amazon ECR repository name
  ECS_SERVICE: crm-web3-service-production-service # set this to your Amazon ECS service name
  ECS_CLUSTER: crm-backend-production-cluster # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/production-taskdef.json
  CONTAINER_NAME: crm-web3-service

jobs:
  run-tests:
    runs-on: ubuntu-latest

    # Docker Hub image that  executes in
    container: node:16-alpine

    # This starts a container with postgres so we can do e2e tests
    # In our CI Pipeline
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: crm-web3-svc-test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/crm-web3-svc-test

    steps:
      - uses: actions/checkout@v3

      - name: Install Node.js version
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

  deploy_production:
    name: Deploy Production
    runs-on: ubuntu-latest
    environment: production

    # Only deploys the code if the build was succesfull and if it's a merge
    # if: ${{ github.event_name == 'push' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
