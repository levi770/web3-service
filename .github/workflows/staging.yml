name: staging-workflow

on:
  push:
    branches: [development]
  pull_request:
    branches: [development]

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: crm-web3-service-staging # set this to your Amazon ECR repository name
  ECS_SERVICE: crm-web3-service-staging-service # set this to your Amazon ECS service name
  ECS_CLUSTER: crm-backend-staging-cluster # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/staging-taskdef.json
  CONTAINER_NAME: crm-web3-service

jobs:
  # run-tests:
  #   runs-on: ubuntu-latest

  #   # Docker Hub image that  executes in
  #   container: node:16-alpine

  #   # This starts a container with postgres so we can do e2e tests
  #   # In our CI Pipeline
  #   services:
  #     postgres:
  #       image: postgres
  #       env:
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_DB: crm-web3-svc-test
  #       # Set health checks to wait until postgres has started
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5

  #   env:
  #     DATABASE_URL: postgres://postgres:postgres@postgres:5432/crm-web3-svc-test

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Install Node.js version
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: 16.x
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  deploy_staging:
    name: Deploy Staging
    runs-on: ubuntu-latest
    environment: staging

    # Only deploys the code if the build was succesfull and if it's a merge
    if: ${{ github.event_name == 'push' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            NODE_ENV=production
            PORT=${{secrets.PORT}}
            POSTGRES_URI=${{secrets.POSTGRES_URI}}
            REDIS_HOST=${{secrets.REDIS_HOST}}
            REDIS_PORT=${{secrets.REDIS_PORT}}
            REDIS_URI=${{secrets.REDIS_URI}}
            AWS_REGION=${{secrets.AWS_REGION}}
            AWS_ACCESS_KEY=${{secrets.AWS_ACCESS_KEY}}
            AWS_SECRET_KEY=${{secrets.AWS_SECRET_KEY}}
            AWS_S3_BUCKET_NAME=${{secrets.AWS_S3_BUCKET_NAME}}
            AWS_ACCOUNT=${{secrets.AWS_ACCOUNT}}
            ETHEREUM_HOST=${{secrets.ETHEREUM_HOST}}
            POLYGON_HOST=${{secrets.POLYGON_HOST}}
            LOCAL_HOST=${{secrets.LOCAL_HOST}}
            PINATA_KEY=${{secrets.PINATA_KEY}}
            PINATA_SECRET=${{secrets.PINATA_SECRET}}
            PINATA_GATEWAY=${{secrets.PINATA_GATEWAY}}
            PINATA_URL=${{secrets.PINATA_URL}}
            DEFAULT_PASSWORD=${{secrets.DEFAULT_PASSWORD}}
            SQS_ENDPOINT=${{secrets.SQS_ENDPOINT}}
            SQS_CONSUMER_NAME=${{secrets.SQS_CONSUMER_NAME}}
            SQS_PRODUCER_NAME=${{secrets.SQS_PRODUCER_NAME}}
            AWS_SES_SMTP_HOST=${{secrets.AWS_SES_SMTP_HOST}}
            AWS_SES_SMTP_PORT=${{secrets.AWS_SES_SMTP_PORT}}
            AWS_SES_SMTP_USERNAME=${{secrets.AWS_SES_SMTP_USERNAME}}
            AWS_SES_SMTP_PASSWORD=${{secrets.AWS_SES_SMTP_PASSWORD}}
            EMAIL_FROM_NAME=${{secrets.EMAIL_FROM_NAME}}
            EMAIL_FROM_ADDRESS=${{secrets.EMAIL_FROM_ADDRESS}}
            EMAILS_LIST=${{secrets.EMAILS_LIST}}
            APP_URL=${{secrets.APP_URL}}
            JWT_SECRET=${{secrets.JWT_SECRET}}
            JWT_EXPIRATION=${{secrets.JWT_EXPIRATION}}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
