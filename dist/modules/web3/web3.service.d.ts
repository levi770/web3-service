import Web3 from 'web3';
import { TransactionReceipt } from 'web3-core';
import { ConfigService } from '@nestjs/config';
import { GetJobDto } from './dto/getJob.dto';
import { Job, Queue } from 'bull';
import { JobResultDto } from '../../common/dto/jobResult.dto';
import { Networks, ProcessTypes } from '../../common/constants';
import { Observable } from 'rxjs';
import { TxOptions } from './interfaces/txOptions.interface';
import { TxResultDto } from './dto/txResult.dto';
import { WhitelistModel } from '../db/models/whitelist.model';
import { ProcessData, Wallet } from '../../common/types';
import { DbService } from '../db/db.service';
import { PredictDto } from './dto/predict.dto';
export declare class Web3Service {
    private web3Queue;
    private configService;
    private dbService;
    private ethereum;
    private polygon;
    private local;
    constructor(web3Queue: Queue, configService: ConfigService, dbService: DbService);
    getJob(data: GetJobDto): Promise<Job<any>>;
    processJob(data: ProcessData, processType: ProcessTypes): Promise<Observable<JobResultDto>>;
    processTx(txOptions: TxOptions): Promise<TxResultDto>;
    getTxReceipt(txHash: string, network: Networks): Promise<TransactionReceipt>;
    getMerkleRoot(leaves: WhitelistModel[]): Promise<string>;
    getMerkleProof(leaves: WhitelistModel[], address: string): Promise<string[]>;
    newWallet(): Promise<Wallet>;
    getWeb3(network: Networks): Web3;
    predictContractAddress(data: PredictDto): Promise<string>;
}
